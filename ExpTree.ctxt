#BlueJ class context
comment0.target=ExpTree
comment0.text=\r\n\ This\ class\ creates\ a\ binary\ expression\ tree\ from\ a\ mathematical\ expression\ given\ by\ the\ user.\r\n\ It\ accepts\ prefix,\ postfix,\ and\ infix\ notations,\ with\ certain\ limitations.\r\n\ It\ can\ create\ the\ tree,\ evaluate\ the\ expression,\ print\ a\ graphical\ representation\ of\ the\ tree,\r\n\ and\ give\ instructions\ for\ evaluating\ the\ expression\ in\ paragraph\ form.\r\n\ The\ main\ method\ combines\ all\ of\ these\ functions,\ but\ the\ functions\ can\ be\ used\ individually\ as\ well.\r\n
comment1.params=exp
comment1.target=ExpTree(java.lang.String)
comment10.params=infix
comment10.target=java.lang.String[]\ inToPost(java.lang.String[])
comment11.params=forward
comment11.target=java.lang.String[]\ reverse(java.lang.String[])
comment12.params=input
comment12.target=java.lang.String[]\ inToPre(java.lang.String)
comment13.params=input
comment13.target=java.lang.String[]\ toPrefix(java.lang.String)
comment14.params=prefix\ i
comment14.target=ExpTree.ExpTreeNode\ fill(java.lang.String[],\ ExpTree.Position)
comment15.params=input
comment15.target=void\ fill(java.lang.String)
comment16.params=node
comment16.target=java.lang.String\ prefix(ExpTree.ExpTreeNode)
comment17.params=
comment17.target=java.lang.String\ prefix()
comment18.params=node
comment18.target=java.lang.String\ postfix(ExpTree.ExpTreeNode)
comment19.params=
comment19.target=java.lang.String\ postfix()
comment2.params=
comment2.target=ExpTree()
comment20.params=node
comment20.target=java.lang.String\ infix(ExpTree.ExpTreeNode)
comment21.params=
comment21.target=java.lang.String\ infix()
comment22.params=node\ printError
comment22.target=int\ eval(ExpTree.ExpTreeNode,\ boolean)
comment23.params=printError
comment23.target=int\ eval(boolean)
comment24.params=
comment24.target=int\ eval()
comment25.params=original\ nodeString\ pos
comment25.target=java.lang.String\ insertString(java.lang.String,\ java.lang.String,\ int)
comment26.params=node\ drawing\ level\ parPos\ dir
comment26.target=java.lang.String[]\ draw(ExpTree.ExpTreeNode,\ java.lang.String[],\ int,\ int,\ int)
comment27.params=
comment27.target=java.lang.String\ toString()
comment28.params=c
comment28.target=java.lang.String\ opNoun(char)
comment29.params=c\ a\ b
comment29.target=java.lang.String\ operation(char,\ ExpTree.ExpTreeNode,\ ExpTree.ExpTreeNode)
comment3.params=c
comment3.target=boolean\ isOp(java.lang.String)
comment30.params=i
comment30.target=java.lang.String\ ordinal(int)
comment31.params=node\ steps\ i
comment31.target=java.util.ArrayList\ instruct(ExpTree.ExpTreeNode,\ java.util.ArrayList,\ ExpTree.Position)
comment32.params=
comment32.target=java.lang.String\ instruct()
comment33.params=input
comment33.target=void\ doItAll(java.lang.String)
comment34.params=args
comment34.target=void\ main(java.lang.String[])
comment4.params=c
comment4.target=boolean\ isOp(char)
comment5.params=input
comment5.target=boolean\ isPrefix(java.lang.String)
comment6.params=input
comment6.target=boolean\ isPostfix(java.lang.String)
comment7.params=input
comment7.target=boolean\ isInfix(java.lang.String)
comment8.params=postfixString
comment8.target=java.lang.String[]\ postToPre(java.lang.String)
comment9.params=op
comment9.target=int\ prec(java.lang.String)
numComments=35
